from sqlalchemy import inspect
from dotenv import load_dotenv
from pathlib import Path
env_path = Path(__file__).resolve().parent / ".env"
load_dotenv(dotenv_path=env_path)

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
import os
from backend.base import Base  # Import Base t·ª´ base.py
import sys

sys.path.append(os.path.dirname(os.path.dirname(__file__)))  # Th√™m th∆∞ m·ª•c cha v√†o sys.path

# DATABASE_URL = os.getenv("DATABASE_URL")
# if not DATABASE_URL:
#     raise ValueError("‚ùå DATABASE_URL is missing. Check your .env file!")  # S·ª≠a ValueValue th√†nh ValueError

# engine = create_engine(DATABASE_URL)
# SessionLocal = sessionmaker(bind=engine)

# ============== Good for local =========
# SQLALCHEMY_DATABASE_URL = "postgresql://postgres:1234@localhost:5432/fhir_data"

# engine = create_engine(SQLALCHEMY_DATABASE_URL)
# ================================================================

# ============= local v√† Render ==================
# ‚úÖ Khai b√°o bi·∫øn tr∆∞·ªõc khi d√πng
DATABASE_URL = os.getenv("DATABASE_URL")

# T·ª± ƒë·ªông nh·∫≠n bi·∫øt m√¥i tr∆∞·ªùng
is_render = os.getenv("RENDER") == "true"

# Ch·ªâ load .env khi ch·∫°y local
if not is_render:
    load_dotenv()

# L·∫•y DATABASE_URL t·ª´ m√¥i tr∆∞·ªùng
SQLALCHEMY_DATABASE_URL = os.getenv("DATABASE_URL")
if not SQLALCHEMY_DATABASE_URL:
    raise RuntimeError("‚ùå DATABASE_URL kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p")
print("üì¶ DATABASE_URL =", repr(DATABASE_URL))  # Th√™m d√≤ng n√†y ƒë·ªÉ ki·ªÉm tra

# T·∫°o engine
engine = create_engine(SQLALCHEMY_DATABASE_URL, pool_pre_ping=True)

# ==================================================


SessionLocal = sessionmaker(bind=engine)
Base = declarative_base()

def init_db():
    Base.metadata.create_all(bind=engine)  # T·∫°o b·∫£ng n·∫øu ch∆∞a c√≥

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

if __name__ == "__main__":
    try:
        with engine.connect() as conn:
            print("‚úÖ Database connected successfully.")
    except Exception as e:
        print("‚ùå Database connection failed:", e)

