from sqlalchemy import inspect
from dotenv import load_dotenv
from pathlib import Path
env_path = Path(__file__).resolve().parent / ".env"
load_dotenv(dotenv_path=env_path)

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
import os
from backend.base import Base  # Import Base t·ª´ base.py
import sys

'''
sys.path.append(os.path.dirname(os.path.dirname(__file__)))  # Th√™m th∆∞ m·ª•c cha v√†o sys.path
SQLALCHEMY_DATABASE_URL = "postgresql://postgres:1234@localhost:5432/fhir_data"

engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(bind=engine)
Base = declarative_base()

def init_db():
    Base.metadata.create_all(bind=engine)  # T·∫°o b·∫£ng n·∫øu ch∆∞a c√≥

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

if __name__ == "__main__":
    try:
        with engine.connect() as conn:
            print("‚úÖ Database connected successfully.")
    except Exception as e:
        print("‚ùå Database connection failed:", e)
        
'''

# T·ª± ƒë·ªông nh·∫≠n bi·∫øt m√¥i tr∆∞·ªùng Render
is_render = os.getenv("RENDER") == "true"

# ‚úÖ Load .env khi ch·∫°y local
if not is_render:
    env_path = Path(__file__).resolve().parent / ".env"
    load_dotenv(dotenv_path=env_path)

# ‚úÖ Fallback: d√πng bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c chu·ªói local
DATABASE_URL = os.getenv("DATABASE_URL") or "postgresql://postgres:1234@localhost:5432/fhir_data"

# ‚úÖ Ki·ªÉm tra c√∫ ph√°p
if not DATABASE_URL.startswith("postgresql://"):
    raise RuntimeError(f"‚ùå DATABASE_URL kh√¥ng h·ª£p l·ªá: {repr(DATABASE_URL)}")

# ‚úÖ In ra ƒë·ªÉ ki·ªÉm tra
print("üì¶ DATABASE_URL =", repr(DATABASE_URL))

# ‚úÖ T·∫°o engine
engine = create_engine(DATABASE_URL, pool_pre_ping=True)

# ‚úÖ Session v√† Base
SessionLocal = sessionmaker(bind=engine)
Base = declarative_base()

# ‚úÖ H√†m t·∫°o b·∫£ng
def init_db():
    Base.metadata.create_all(bind=engine)

# ‚úÖ Dependency cho FastAPI
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# ‚úÖ Ki·ªÉm tra k·∫øt n·ªëi khi ch·∫°y tr·ª±c ti·∫øp
if __name__ == "__main__":
    try:
        with engine.connect() as conn:
            print("‚úÖ Database connected successfully.")
    except Exception as e:
        print("‚ùå Database connection failed:", e)
