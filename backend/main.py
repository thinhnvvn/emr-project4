from backend.routers.patients import router as patients_router
from backend.routers.observations import router as observations_router
from backend.models import Patient, Observation


from fastapi import FastAPI, Depends, HTTPException, Query
from fastapi.staticfiles import StaticFiles
from sqlalchemy.orm import Session
import sys
import os
import pandas as pd
import statistics



print("Current sys.path:", sys.path)  # Debug sys.path
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from backend.database import get_db, init_db
from backend.models import Patient
from backend.crud.patient import get_patients  # Import get_patients t·ª´ crud/patient.py
from fastapi.responses import JSONResponse

from backend.analysis import  analyze_observations, classify_risk
from collections import defaultdict
from fastapi.responses import FileResponse

import psycopg2
import logging

# =================================================================================
# cho Render
import os
from sqlalchemy import create_engine

DATABASE_URL = os.getenv("DATABASE_URL")
# =================================================================================

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()]
)

logger = logging.getLogger(__name__)


app = FastAPI()

from backend.routers import patients
app.include_router(patients.router)

'''
=================================================================================
# good for local

# T√≠nh ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi t·ªõi th∆∞ m·ª•c www
static_path = os.path.abspath("D:/emr-project4/frontend/www")

# Ki·ªÉm tra t·ªìn t·∫°i
if not os.path.exists(static_path):
    raise RuntimeError(f"‚ùå Th∆∞ m·ª•c static kh√¥ng t·ªìn t·∫°i: {static_path}")

# Mount static files
app.mount("/static", StaticFiles(directory=static_path, html=True), name="static")

# print("üìÅ Static path:", static_path)
# print("üìÑ search.html exists:", os.path.exists(os.path.join(static_path, "search.html")))
'''
# ==================================================================================
# ch·∫°y ƒë∆∞·ª£c c·∫£ tr√™n m√°y b·∫°n v√† tr√™n Render

# T√≠nh ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi t·ªõi th∆∞ m·ª•c frontend/www
static_path = os.path.join(os.path.dirname(__file__), "..", "frontend", "www")
static_path = os.path.abspath(static_path)

# Ki·ªÉm tra t·ªìn t·∫°i
if not os.path.exists(static_path):
    raise RuntimeError(f"‚ùå Th∆∞ m·ª•c static kh√¥ng t·ªìn t·∫°i: {static_path}")

# Mount static files v√†o /static
app.mount("/static", StaticFiles(directory=static_path, html=True), name="static")
#  mount th√™m ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p index.html qua /
app.mount("/", StaticFiles(directory=static_path, html=True), name="frontend")


print("üìÅ Static path:", static_path)
print("üìÑ search.html exists:", os.path.exists(os.path.join(static_path, "search.html")))

# =================================================================================

# 2) Tr·∫£ v·ªÅ search.html khi truy c·∫≠p g·ªëc
@app.get("/", include_in_schema=False)
def serve_search():
    # return FileResponse("static/search.html")
    return FileResponse(os.path.join(static_path, "search.html"))


# Include router
app.include_router(patients_router)
app.include_router(observations_router)

# Ki·ªÉm tra t·ªìn t·∫°i
if not os.path.exists(static_path):
    raise RuntimeError(f"‚ùå Th∆∞ m·ª•c static kh√¥ng t·ªìn t·∫°i: {static_path}")



@app.on_event("startup")
async def startup_event():
    init_db()  # Kh·ªüi t·∫°o database khi app kh·ªüi ƒë·ªông

@app.get("/api/patients")
def read_patients(db: Session = Depends(get_db)):
    try:
        patients = get_patients(db)
        return [
            {
                "patient_id": p.patient_id,
                "full_name": p.full_name,
                "gender": p.gender,
                "birth_date": p.birth_date.strftime("%Y-%m-%d") if p.birth_date else None,
                "phone": p.phone,
                "insurance_id": p.insurance_id
            }
            for p in patients
        ]
    except Exception as e:
        print(f"Error in read_patients: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Internal Server Error: {str(e)}")

print("üìÑ ƒêANG CH·∫†Y FILE:", __file__, flush=True)

# tr·∫£ l·∫°i nhi·ªÅu k·∫øt qu·∫£
@app.get("/api/patients/search")
def search_patients(query: str = Query(...), db: Session = Depends(get_db)):
    from backend.models import Patient

    query = query.strip()

    # N·∫øu query gi·ªëng ID (b·∫Øt ƒë·∫ßu b·∫±ng "P" v√† c√≥ s·ªë), th√¨ t√¨m theo ID ch√≠nh x√°c
    if query.upper().startswith("P") and query[1:].isdigit():
        results = db.query(Patient).filter(Patient.patient_id == query).all()
    else:
        # Ng∆∞·ª£c l·∫°i, t√¨m theo t√™n g·∫ßn ƒë√∫ng
        results = db.query(Patient).filter(Patient.full_name.ilike(f"%{query}%")).all()

    response = []
    for p in results:
        response.append({
            "patient_id": p.patient_id,
            "full_name": p.full_name,
            "gender": p.gender or "",
            "birth_date": str(p.birth_date) if p.birth_date else "",
            "phone": p.phone or "",
            "insurance_id": p.insurance_id or ""
        })

    return response

# @app.get("/api/observations/{patient_id}")
# def get_observations(patient_id: str, db: Session = Depends(get_db)):
#     print("Ki·ªÉu db:", type(db))

#     try:
#         obs = db.query(Observation).filter(Observation.patient_id == patient_id).all()
#         return [{
#             "type": o.type,
#             "value": o.value,
#             "date": o.date.isoformat() if o.date else None
#         } for o in obs]
#     except Exception as e:
#         raise HTTPException(status_code=500, detail=f"L·ªói khi truy v·∫•n: {str(e)}")

@app.get("/api/observations/{patient_id}/analyze")
def analyze_observations(patient_id: str, db: Session = Depends(get_db)):
    rows = db.query(Observation).filter(Observation.patient_id == patient_id).order_by(Observation.date.asc()).all()
    
    grouped = defaultdict(list)
    for obs in rows:
        try:
            val = float(str(obs.value).replace("¬∞C", "").strip())
            grouped[obs.type].append(val)
        except Exception as e:
            print(f"L·ªói √©p ki·ªÉu value: {obs.value} ‚Üí {e}")
            continue

    result = {}
    for obs_type, values in grouped.items():
        values = values[-6:]
        try:
            trend = analyze_trend(values)
            mean = round(statistics.mean(values), 2) if values else None
            std_dev = round(statistics.stdev(values), 2) if len(values) > 1 else None
            rolling = round(statistics.mean(values[-3:]), 2) if len(values) >= 3 else None
        except Exception as e:
            print(f"L·ªói ph√¢n t√≠ch {obs_type}: {e}")
            trend, mean, std_dev, rolling = "Kh√¥ng th·ªÉ ph√¢n t√≠ch", None, None, None

        result[obs_type] = {
            "trend": trend,
            "mean": mean,
            "std_dev": std_dev,
            "latest_rolling_mean": rolling,
            "data_points": len(values)
        }

    return result

@app.get("/api")
def read_api():
    return {"message": "‚úÖ EMR backend is running!"}


from sqlalchemy import text

@app.on_event("startup")
# good
# def show_routes():
#     for route in app.routes:
#         print("‚Üí", route.path, "-", route.name)

# good
# def check_columns():
#     from backend.database import SessionLocal
#     db = SessionLocal()
#     result = db.execute(text("SELECT * FROM patients LIMIT 1"))
#     print("üß™ Columns:", result.keys())
    
def show_db_name():
    from backend.database import SessionLocal
    db = SessionLocal()
    db_name = db.execute(text("SELECT current_database()")).scalar()
    print("üß† Connected to database:", db_name)
    
# ================================================================================================

# @app.get("/api/observations/{patient_id}/analyze")
# def analyze_patient_observations(patient_id: str, db: Session = Depends(get_db)):
#     try:
#         obs = db.query(Observation).filter(Observation.patient_id == patient_id).all()
#         if not obs:
#             raise HTTPException(status_code=404, detail="Kh√¥ng c√≥ d·ªØ li·ªáu quan s√°t")

#         result = analyze_observations(obs)
#         return result

#     except Exception as e:
#         raise HTTPException(status_code=500, detail=f"L·ªói ph√¢n t√≠ch: {str(e)}")


# @app.get("/api/patients/{patient_id}/risk")
# def get_patient_risk(patient_id: str, db: Session = Depends(get_db)):
#     try:
#         obs = db.query(Observation).filter(Observation.patient_id == patient_id).all()
#         if not obs:
#             raise HTTPException(status_code=404, detail="Kh√¥ng c√≥ d·ªØ li·ªáu quan s√°t")

#         risk = classify_risk(obs)
#         return {"patient_id": patient_id, "risk_level": risk}

#     except Exception as e:
#         raise HTTPException(status_code=500, detail=f"L·ªói ph√¢n lo·∫°i nguy c∆°: {str(e)}")

# @app.get("/api/observations/{patient_id}/analyze")
# def analyze_patient_observations(patient_id: str, db: Session = Depends(get_db)):
#     from backend.analysis import analyze_observations

#     try:
#         obs = db.query(Observation).filter(Observation.patient_id == patient_id).all()
#         if not obs:
#             return JSONResponse(status_code=404, content={"detail": "Kh√¥ng c√≥ d·ªØ li·ªáu quan s√°t"})

#         result = analyze_observations(obs)
#         return JSONResponse(status_code=200, content=result)

#     except Exception as e:
#         return JSONResponse(status_code=500, content={"detail": f"L·ªói ph√¢n t√≠ch: {str(e)}"})


# @app.get("/api/patients/{patient_id}/risk")
# def get_patient_risk(patient_id: str, db: Session = Depends(get_db)):
#     from backend.analysis import classify_risk

#     try:
#         obs = db.query(Observation).filter(Observation.patient_id == patient_id).all()
#         if not obs:
#             raise HTTPException(status_code=404, detail="Kh√¥ng c√≥ d·ªØ li·ªáu quan s√°t")

#         risk = classify_risk(obs)
#         return {"patient_id": patient_id, "risk_level": risk}

#     except Exception as e:
#         raise HTTPException(status_code=500, detail=f"L·ªói ph√¢n lo·∫°i nguy c∆°: {str(e)}")


@app.get("/api/observations/{patient_id}/analyze")
def analyze_patient_observations(patient_id: str, db: Session = Depends(get_db)):
    try:
        obs = db.query(Observation).filter(Observation.patient_id == patient_id).all()
        if not obs:
            return JSONResponse(status_code=404, content={"detail": "Kh√¥ng c√≥ d·ªØ li·ªáu quan s√°t"})

        result = analyze_observations(obs)
        return JSONResponse(status_code=200, content=result)

    except Exception as e:
        return JSONResponse(status_code=500, content={"detail": f"L·ªói ph√¢n t√≠ch: {str(e)}"})


@app.get("/api/patients/{patient_id}/risk")
def get_patient_risk(patient_id: str, db: Session = Depends(get_db)):
    try:
        obs = db.query(Observation).filter(Observation.patient_id == patient_id).all()
        if not obs:
            return JSONResponse(status_code=404, content={"detail": "Kh√¥ng c√≥ d·ªØ li·ªáu quan s√°t"})

        risk = classify_risk(obs)
        return JSONResponse(status_code=200, content={"patient_id": patient_id, "risk_level": risk})

    except Exception as e:
        return JSONResponse(status_code=500, content={"detail": f"L·ªói ph√¢n lo·∫°i nguy c∆°: {str(e)}"})
    

def analyze_trend(values):
    if len(values) < 3:
        return "Kh√¥ng ƒë·ªß d·ªØ li·ªáu"
    diffs = [values[i] - values[i - 1] for i in range(1, len(values))]
    avg_diff = sum(diffs) / len(diffs)
    max_diff = max(abs(d) for d in diffs)

    if abs(avg_diff) < 0.05 and max_diff < 0.2:
        return "·ªîn ƒë·ªãnh"
    elif avg_diff > 0.1 and max_diff > 0.3:
        return "TƒÉng r√µ r·ªát"
    elif avg_diff < -0.1 and max_diff > 0.3:
        return "Gi·∫£m r√µ r·ªát"
    elif avg_diff > 0.05:
        return "TƒÉng nh·∫π"
    elif avg_diff < -0.05:
        return "Gi·∫£m nh·∫π"
    else:
        return "Dao ƒë·ªông"


# @app.get("/api/observations/{patient_id}/analyze")
# def analyze_observations(patient_id: str):
#     print("G·ªçi ph√¢n t√≠ch cho:", patient_id, type(patient_id))
#     try:
#         conn = psycopg2.connect(
#             host="localhost",
#             database="fhir_data",
#             user="postgres",
#             password="1234"
#         )
#         cursor = conn.cursor()
#         cursor.execute("""
#             SELECT type, value, date
#             FROM observation
#             WHERE patient_id = %s
#             ORDER BY date ASC
#         """, (str(patient_id),))
#         rows = cursor.fetchall()
#         conn.close()
#     except Exception as e:
#         print("L·ªói ph√¢n t√≠ch:", e)
#         raise HTTPException(status_code=500, detail=f"L·ªói k·∫øt n·ªëi DB: {e}")

#     grouped = defaultdict(list)
#     for obs_type, value, date in rows:
#         try:
#             val = float(str(value).replace("¬∞C", "").strip())
#             grouped[obs_type].append(val)
#         except Exception as e:
#             print(f"L·ªói √©p ki·ªÉu value: {value} ‚Üí {e}")
#             continue

#     result = {}
#     for obs_type, values in grouped.items():
#         values = values[-6:]  # l·∫•y 6 gi√° tr·ªã g·∫ßn nh·∫•t
#         try:
#             trend = analyze_trend(values)
#             mean = round(statistics.mean(values), 2) if values else None
#             std_dev = round(statistics.stdev(values), 2) if len(values) > 1 else None
#             rolling = round(statistics.mean(values[-3:]), 2) if len(values) >= 3 else None
#         except Exception as e:
#             print(f"L·ªói ph√¢n t√≠ch {obs_type}: {e}")
#             trend, mean, std_dev, rolling = "Kh√¥ng th·ªÉ ph√¢n t√≠ch", None, None, None

#         result[obs_type] = {
#             "trend": trend,
#             "mean": mean,
#             "std_dev": std_dev,
#             "latest_rolling_mean": rolling,
#             "data_points": len(values)
#         }

#     return result

@app.get("/api/observations/{patient_id}/analyze")
def analyze_observations(patient_id: str):
    raw_list = get_observations(patient_id)  # list[Observation]
    grouped = defaultdict(list)

    for obs in raw_list:
        try:
            # Observation.value c√≥ th·ªÉ ƒë√£ l√† float ho·∫∑c string
            v = float(obs.value)
            grouped[obs.type].append(v)
        except Exception as e:
            print(f"Bad obs.value {obs.value}: {e}")
            continue

    # ph·∫ßn t√≠nh to√°n ho√†n to√†n gi·ªëng A)
    result = {}
    for obs_type, vals in grouped.items():
        last6 = vals[-6:]
        try:
            trend = analyze_trend(last6)
            mean = round(statistics.mean(last6), 2)
            std_dev = round(statistics.stdev(last6), 2) if len(last6)>1 else None
            rolling = round(statistics.mean(last6[-3:]), 2) if len(last6)>=3 else None
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))

        result[obs_type] = {
            "trend": trend,
            "mean": mean,
            "std_dev": std_dev,
            "latest_rolling_mean": rolling,
            "data_points": len(last6)
        }

    return result


